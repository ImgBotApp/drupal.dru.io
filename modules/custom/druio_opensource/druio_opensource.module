<?php

/**
 * @file
 * Main file for hooks and custom functions.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Database\Database;

/**
 * Create opensource version of database and configs.
 */
function druio_opensource_create() {
  // Clean all cache before operations. This is reduce database total size
  // and remove unnecessary data.
  drupal_flush_all_caches();
  // Temporary database file uri.
  $tmp_db_uri = new FormattableMarkup('@path/@filename.sql.gz', [
    '@path' => \Drupal::service('file_system')->realpath('public://'),
    '@filename' => 'dump-' . rand(0, time()),
  ]);
  _druio_opensource_db_mysql_dump('default', $tmp_db_uri);

  // Import original database dump into second database.
  _druio_opensource_db_mysql_import('druio_opensource_db', $tmp_db_uri);

  // Delete temporary file.
  file_unmanaged_delete($tmp_db_uri);

  // Clean data.
  _druio_opensource_db_clean_data();

  // Cleaned database file. This will be result file for public access.
  $clean_db_uri = new FormattableMarkup('@path/@filename.sql.gz', [
    '@path' => \Drupal::service('file_system')->realpath('public://'),
    '@filename' => 'database',
  ]);

  // Dump cleaned database.
  _druio_opensource_db_mysql_dump('druio_opensource_db', $clean_db_uri);
}

/**
 * Dump database to file.
 *
 * @param string $connection_name
 *   Either 'default' or 'druio_opensource_db' for which database dump must be
 *   created.
 * @param string $filepath
 *   URI to file in which record dump.
 *
 * @return mixed
 *   Command execution results.
 */
function _druio_opensource_db_mysql_dump(string $connection_name, string $filepath) {
  $connection_info = Database::getConnectionInfo($connection_name);
  $cmd = new FormattableMarkup('mysqldump -u @username -p@password @database | gzip > @dumpname', [
    '@username' => $connection_info['default']['username'],
    '@password' => $connection_info['default']['password'],
    '@database' => $connection_info['default']['database'],
    '@dumpname' => $filepath,
  ]);
  exec($cmd, $output, $result);
  return $result;
}

/**
 * Import dump file into database.
 *
 * @param string $connection_name
 *   Either 'default' or 'druio_opensource_db' for which database dump must be
 *   created.
 * @param string $filepath
 *   URI to file in which record dump.
 *
 * @return mixed
 *   Command execution results.
 */
function _druio_opensource_db_mysql_import(string $connection_name, string $filepath) {
  /** @var Drupal\druio_opensource_db\Service\Connector $connector */
  $connector = \Drupal::service('druio.osdb.connector');
  $connection_info = Database::getConnectionInfo($connection_name);
  $database = $connector->setSecondDatabaseActive();
  // Checkout, is database has tables.
  $tables = $database->query('SHOW TABLES')->fetchCol();
  // Clear tables if they exist.
  if (!empty($tables)) {
    foreach ($tables as $table) {
      $database->schema()->dropTable($table);
    }
  }
  $cmd = new FormattableMarkup('gunzip -c @dumpname | mysql -u @username -p@password @database', [
    '@username' => $connection_info['default']['username'],
    '@password' => $connection_info['default']['password'],
    '@database' => $connection_info['default']['database'],
    '@dumpname' => $filepath,
  ]);
  exec($cmd, $output, $result);
  $connector->setMainDatabaseActive();
  return $result;
}

/**
 * Clean up all sensitive data here in second database.
 */
function _druio_opensource_db_clean_data() {
  /** @var Drupal\druio_opensource_db\Service\Connector $connector */
  $connector = \Drupal::service('druio.osdb.connector');
  $database = $connector->setSecondDatabaseActive();

  // Create fake mails and password.
  $database->update('users_field_data')
    ->expression('mail', "CONCAT('user', uid, '@example.com')")
    ->expression('init', "CONCAT('user', uid, '@example.com')")
    ->fields([
      'pass' => 'use drush uli',
    ])
    ->condition('uid', 0, '>')
    ->execute();

  // Clean up watchdog table.
  $database->truncate('watchdog')->execute();

  // Clean webform data.
  $database->truncate('webform_submission')->execute();
  $database->truncate('webform_submission_data')->execute();
  $database->truncate('webform_submission_log')->execute();

  // Enable main database.
  $connector->setMainDatabaseActive();
}

/**
 * Implements hook_cron().
 */
function druio_opensource_cron() {
  $expires = \Drupal::state()->get('druio_opensource.last_check', 0);
  // Every 24 hours.
  $timeout = 60 * 60 * 24;
  if ($expires < time()) {
    druio_opensource_create();
    \Drupal::state()->set('druio_opensource.last_check', time() + $timeout);
  }
}
